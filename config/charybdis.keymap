#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

&sk { quick-release; };

&lt { require-prior-idle-ms = <160>; };

&mt {
    flavor = "balanced";
    require-prior-idle-ms = <160>;
};

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <2 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        switch_repeat: switch_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <1000>;
            bindings = <&switchwin>, <&key_repeat>;

            require-prior-idle-ms = <200>;
            hold-trigger-key-positions = <2 3 4 16 17 28 15 14 26 27>;
            label = "SWITCH_REPEAT";
        };

        rclick_ctrl: rclick_ctrl {
            compatible = "zmk,behavior-hold-tap";
            label = "RCLICK_CTRL";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        repeat_num: repeat_num {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEAT_NUM";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <190>;
        };

        back_home: back_home {
            compatible = "zmk,behavior-hold-tap";
            label = "BACK_HOME";
            bindings = <&althome>, <&altleft>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rparenth {
            bindings = <&mt RIGHT_BRACKET RIGHT_PARENTHESIS>;
            key-positions = <40 21>;
        };

        exclai {
            bindings = <&mt AT EXCLAMATION>;
            key-positions = <7 19>;
        };

        enterl {
            bindings = <&mt LEFT_SHIFT ENTER>;
            key-positions = <28 27>;
        };

        lparenth {
            bindings = <&mt LEFT_BRACKET LEFT_PARENTHESIS>;
            key-positions = <37 14>;
        };

        backspaqe {
            bindings = <&kp BACKSPACE>;
            key-positions = <31 19>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <14 15>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
        };

        dele {
            bindings = <&kp DEL>;
            key-positions = <16 28>;
        };

        rightclick {
            bindings = <&rclick_ctrl LCTRL RCLK>;
            key-positions = <26 27>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <40 22>;
        };

        resetble {
            bindings = <&bt BT_CLR>;
            key-positions = <18 19 17 16>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        stickyctrl {
            bindings = <&sk LEFT_CONTROL>;
            key-positions = <15 27>;
        };

        colonn {
            bindings = <&kp COLON>;
            key-positions = <40 19>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <40 31>;
        };

        value {
            bindings = <&value>;
            key-positions = <9 21>;
        };

        statementcombo {
            bindings = <&statement>;
            key-positions = <40 9>;
        };

        enterr {
            bindings = <&kp ENTER>;
            key-positions = <31 32>;
        };

        capword {
            bindings = <&caps_word>;
            key-positions = <38 39>;
        };

        stickyalt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <14 26>;
        };

        plus {
            bindings = <&mt ASTRK PLUS>;
            key-positions = <5 17>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <37 13>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <26 15>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <2 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <3 4>;
        };

        calc_rel {
            bindings = <&mt LC(R) LC(D)>;
            key-positions = <14 3>;
            require-prior-idle-ms = <180>;
        };

        focus {
            bindings = <&kp LC(E)>;
            key-positions = <16 3>;
        };

        save {
            bindings = <&kp LC(S)>;
            key-positions = <14 26>;
        };

        appmenu {
            bindings = <&kp K_CONTEXT_MENU>;
            key-positions = <32 33>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <32 21>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <33 20>;
        };

        window {
            bindings = <&sk LEFT_GUI>;
            key-positions = <26 27 28>;
        };

        bluetoothone {
            bindings = <&bt BT_SEL 0>;
            key-positions = <1 13>;
        };

        bluetoothtwo {
            bindings = <&bt BT_SEL 1>;
            key-positions = <10 22>;
        };

        types {
            bindings = <&altzero>;
            key-positions = <2 14>;
        };

        showdesktop {
            bindings = <&kp LG(D)>;
            key-positions = <18 6>;
        };

        printscreen {
            bindings = <&kp LG(LS(S))>;
            key-positions = <22 34>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <13 25>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <18 30>;
        };

        ctrlbackspace {
            bindings = <&ctrlback>;
            key-positions = <32 20>;
        };

        closetab {
            bindings = <&kp LC(F4)>;
            key-positions = <17 29>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <4 5>;
        };

        f3 {
            bindings = <&kp F3>;
            key-positions = <17 16>;
        };

        f2 {
            bindings = <&kp F2>;
            key-positions = <28 29>;
        };

        althome {
            bindings = <&back_home 0 0>;
            key-positions = <6 7>;
        };

        doublequote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <31 30>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <21 33>;
        };

        selectall {
            bindings = <&kp LC(A)>;
            key-positions = <3 15>;
        };

        repob {
            bindings = <&repbor>;
            key-positions = <20 19 31 32>;
        };

        sloganize {
            bindings = <&slogan>;
            key-positions = <16 28 27 15>;
        };

        academy {
            bindings = <&repand>;
            key-positions = <15 14 26 27>;
        };
    };

    macros {
        switchwin: switchwin {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&mo 3 &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 3 &kp LGUI>;

            label = "SWITCHWIN";
        };

        info: info {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp F &kp O &kp LPAR &kp SQT &kp FSLH &kp FSLH &kp SQT &kp RPAR &kp LEFT>;
            label = "INFO";
        };

        statement: statement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RET &kp LEFT_BRACE &kp RET &kp RBRC &kp UP_ARROW &kp ENTER>;
            label = "STATEMENT";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(V) &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LPAR &kp O &kp B &kp J &kp E &kp C &kp T>;
            label = "VALUE";
        };

        slogan: slogan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp R &kp U &kp T &kp H &kp L &kp E &kp S &kp D &kp O &kp P &kp A &kp M &kp I &kp N &kp E &kp S &kp T &kp A &kp T &kp E &kp DLLR &kp PRCNT &kp CARET &kp PLUS>;
            label = "SLOGAN";
        };

        repand: repand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp Y &kp N &kp C &kp H &kp R &kp O &kp N &kp I &kp Z &kp E &kp U &kp P &kp G &kp R &kp A &kp D &kp E &kp A &kp B &kp I &kp L &kp I &kp T &kp Y &kp DLLR &kp PRCNT &kp CARET &kp PLUS>;
            label = "REPAND";
        };

        altone: altone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp NUMBER_1>;
            label = "ALTONE";
        };

        altzero: altzero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp NUMBER_0>;
            label = "ALTZERO";
        };

        alta: alta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp A>;
            label = "ALTA";
        };

        alttwo: alttwo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp NUMBER_2>;
            label = "ALTTWO";
        };

        altup: altup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp UP_ARROW>;
            label = "ALTUP";
        };

        altdown: altdown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp DOWN>;
            label = "ALTDOWN";
        };

        althome: althome {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp HOME>;
            label = "ALTHOME";
        };

        altleft: altleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp LEFT>;
            label = "ALTLEFT";
        };

        ctrlback: ctrlback {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LCTRL &kp BACKSPACE>;
            label = "CTRLBACK";
        };

        repbor: repbor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1 &kp LS(L) &kp J &kp LS(X) &kp H &kp LS(Y) &kp E &kp Q &kp N1 &kp C &kp LS(E) &kp LS(M) &kp LS(M) &kp W &kp LS(D) &kp LS(R) &kp LS(O) &kp Z &kp N8 &kp N8 &kp N7 &kp Q &kp N9 &kp LS(Y) &kp LS(U) &kp LS(A) &kp B &kp W &kp N &kp LS(Y) &kp P &kp K &kp R &kp N4 &kp N3 &kp I &kp F &kp LS(R) &kp Y &kp LS(F) &kp LS(U) &kp C &kp U &kp A &kp Y &kp LS(L) &kp N0 &kp LS(K) &kp LS(I) &kp N5 &kp P &kp L &kp LS(J) &kp LS(Q) &kp LS(Q) &kp LS(J) &kp N9 &kp N9 &kp LS(B) &kp LS(D) &kp LS(A) &kp LS(C) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(I) &kp LS(A) &kp LS(Y) &kp N &kp LS(K) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(S) &kp LS(A) &kp LS(Z) &kp LS(D) &kp LS(O) &kp N1 &kp H &kp LS(G) &kp LS(G)>;
            label = "REPBOR";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none  &kp Q  &kp L        &kp Y      &kp P        &kp B        &kp Z           &kp F               &kp O        &kp U       &mt BACKSLASH SLASH  &none
&none  &kp C  &lt 4 R      &lt 2 S    &lt 5 T      &kp G        &kp M           &kp N               &kp E        &kp I       &kp A                &none
&none  &kp W  &mt LCTRL J  &lt 6 V    &kp D        &kp K        &kp X           &kp H               &lt 6 COMMA  &kp PERIOD  &kp SINGLE_QUOTE     &none
                           &mkp LCLK  &lt 1 SPACE  &lt 1 TAB    &sk LEFT_SHIFT  &switch_repeat 0 0
            >;
        };

        num {
            bindings = <
&trans  &kp F9  &kp F5  &kp F11         &kp F3        &trans    &trans  &kp F12       &kp F10  &kp F4        &kp F8  &trans
&trans  &kp N9  &kp N5  &lt 2 NUMBER_1  &kp NUMBER_3  &trans    &kp F2  &kp NUMBER_2  &kp N0   &kp NUMBER_4  &kp N8  &trans
&trans  &trans  &trans  &trans          &kp N7        &kp F7    &kp F6  &kp NUMBER_6  &trans   &trans        &trans  &trans
                        &trans          &trans        &trans    &trans  &trans
            >;
        };

        NAV {
            bindings = <
&none   &none   &none        &none   &none             &none     &none              &none           &kp UP_ARROW   &none      &none            &none
&trans  &trans  &mt LCTRL R  &trans  &mt LEFT_SHIFT T  &none     &mt LS(HOME) HOME  &kp LEFT_ARROW  &kp DOWN       &kp RIGHT  &mt LS(END) END  &none
&none   &none   &none        &none   &none             &none     &none              &kp PAGE_UP     &kp PAGE_DOWN  &none      &none            &none
                             &none   &none             &trans    &trans             &trans
            >;
        };

        switch {
            bindings = <
&trans  &trans  &kp LG(N7)        &kp LG(N8)        &kp LG(N9)        &trans        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)  &kp LG(N0)    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans            &trans            &trans        &trans  &trans
            >;
        };

        snipe {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans    &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &mkp MB4  &mkp MB5
            >;
        };

        bootloader {
            bindings = <
&trans  &bootloader  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &bootloader  &trans
&trans  &trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans       &trans
&trans  &trans       &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans       &trans
                             &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
