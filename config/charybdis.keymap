#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>

/ {
    td_cursor: td_scroll_or_cursor {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        bindings = <&lt 9 ESC>, <&mo 8>;

        // hold, tap, double_tap
    };

    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    combos {
        compatible = "zmk,combos";

        rparenth {
            bindings = <&mt RIGHT_BRACKET RIGHT_PARENTHESIS>;
            key-positions = <40 21>;
        };

        exclai {
            bindings = <&mt AT EXCLAMATION>;
            key-positions = <6 18>;
        };

        enterl {
            bindings = <&kp ENTER>;
            key-positions = <37 38>;
        };

        lparenth {
            bindings = <&mt LEFT_BRACKET LEFT_PARENTHESIS>;
            key-positions = <37 14>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 19>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <14 15>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
        };

        dele {
            bindings = <&kp DEL>;
            key-positions = <28 27>;
        };

        closetab {
            bindings = <&kp LC(F4)>;
            key-positions = <26 27>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <40 22>;
        };

        resetble {
            bindings = <&bt BT_CLR>;
            key-positions = <18 19 17 16>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <31 33>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <32 31>;
        };

        stickyctrl {
            bindings = <&sk LEFT_CONTROL>;
            key-positions = <15 3>;
        };

        colonn {
            bindings = <&kp COLON>;
            key-positions = <40 19>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <40 31>;
        };

        value {
            bindings = <&value>;
            key-positions = <9 21>;
        };

        statementcombo {
            bindings = <&statement>;
            key-positions = <40 9>;
        };

        enterr {
            bindings = <&kp LA(ENTER)>;
            key-positions = <39 40>;
        };

        capword {
            bindings = <&caps_word>;
            key-positions = <38 39>;
        };

        stickyalt {
            bindings = <&sk LEFT_ALT>;
            key-positions = <16 4>;
        };

        plus {
            bindings = <&mt ASTRK PLUS>;
            key-positions = <5 17>;
        };

        lbackspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <19 21 20>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <37 13>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <26 15>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <2 3>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <3 4>;
        };

        calc_rel {
            bindings = <&mt LC(R) LC(D)>;
            key-positions = <14 3>;
            require-prior-idle-ms = <180>;
        };

        focus {
            bindings = <&kp LC(E)>;
            key-positions = <16 3>;
        };

        save {
            bindings = <&kp LC(S)>;
            key-positions = <16 37>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <14 15 16>;
        };

        stickyshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <14 2>;
        };

        f6 {
            bindings = <&kp F6>;
            key-positions = <29 28>;
        };

        leftclick {
            bindings = <&leftclick>;
            key-positions = <32 33>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <32 21>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <33 20>;
        };

        window {
            bindings = <&kp LEFT_GUI>;
            key-positions = <26 27 28>;
        };

        lock {
            bindings = <&kp LG(L)>;
            key-positions = <31 32 33>;
        };

        f5 {
            bindings = <&kp F5>;
            key-positions = <4 5>;
        };

        bluetoothone {
            bindings = <&bt BT_SEL 0>;
            key-positions = <1 13>;
        };

        bluetoothtwo {
            bindings = <&bt BT_SEL 1>;
            key-positions = <10 22>;
        };

        scroll {
            bindings = <&td_cursor>;
            key-positions = <36 37>;
        };
    };

    macros {
        info: info {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp N &kp F &kp O &kp LPAR &kp SQT &kp FSLH &kp FSLH &kp SQT &kp RPAR &kp LEFT>;
            label = "INFO";
        };

        statement: statement {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RET &kp LEFT_BRACE &kp RET &kp RBRC &kp UP_ARROW &kp ENTER>;
            label = "STATEMENT";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(V) &kp LS(A) &kp LS(L) &kp LS(U) &kp LS(E) &kp LPAR &kp O &kp B &kp J &kp E &kp C &kp T>;
            label = "VALUE";
        };

        slogan: slogan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp R &kp U &kp T &kp H &kp L &kp E &kp S &kp D &kp O &kp P &kp A &kp M &kp I &kp N &kp E &kp S &kp T &kp A &kp T &kp E &kp DLLR &kp PRCNT &kp CARET &kp PLUS>;
            label = "SLOGAN";
        };

        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp A &sk LCTRL &kp S>;
            label = "SAVE";
        };

        repand: repand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(S) &kp Y &kp N &kp C &kp H &kp R &kp O &kp N &kp I &kp Z &kp E &kp U &kp P &kp G &kp R &kp A &kp D &kp E &kp A &kp B &kp I &kp L &kp I &kp T &kp Y &kp DLLR &kp PRCNT &kp CARET &kp PLUS>;
            label = "REPAND";
        };

        altone: altone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp NUMBER_1>;
            label = "ALTONE";
        };

        altzero: altzero {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp N0>;
            label = "ALTZERO";
        };

        alta: alta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp A>;
            label = "ALTA";
        };

        alttwo: alttwo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp NUMBER_2>;
            label = "ALTTWO";
        };

        altup: altup {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp UP_ARROW>;
            label = "ALTUP";
        };

        altdown: altdown {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp DOWN>;
            label = "ALTDOWN";
        };

        althome: althome {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp HOME>;
            label = "ALTHOME";
        };

        altleft: altleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LEFT_ALT &kp LEFT>;
            label = "ALTLEFT";
        };

        leftclick: leftclick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_DIVIDE &kp KP_N5>;
            label = "LEFTCLICK";
        };

        repbor: repbor {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp N4 &kp LS(G) &kp LS(K) &kp P &kp LS(T) &kp LS(H) &kp LS(S) &kp LS(I) &kp N &kp L &kp M &kp LS(I) &kp N9 &kp LS(Z) &kp U &kp N &kp N4 &kp LS(A) &kp LS(J) &kp E &kp LS(M) &kp J &kp LS(V) &kp LS(M) &kp N2 &kp N4 &kp N5 &kp N6 &kp N3 &kp N2 &kp D &kp LS(F) &kp LS(Y) &kp LS(I) &kp LS(N) &kp N0 &kp LS(X) &kp B &kp S &kp LS(Y) &kp E &kp J &kp C &kp I &kp N5 &kp N9 &kp F &kp LS(Z) &kp LS(T) &kp U &kp N0 &kp LS(J) &kp LS(Q) &kp LS(Q) &kp LS(J) &kp N9 &kp N9 &kp LS(B) &kp LS(D) &kp LS(A) &kp LS(C) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(I) &kp LS(A) &kp LS(Y) &kp N &kp LS(K) &kp LS(A) &kp LS(A) &kp LS(A) &kp LS(S) &kp LS(A) &kp LS(Z) &kp LS(D) &kp LS(O) &kp N2 &kp L &kp D &kp LS(M)>;
            label = "REPBOR";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none  &kp W  &kp L  &kp Y      &kp P        &kp B        &kp Z           &kp F        &kp O      &kp U       &kp SQT    &none
&none  &kp C  &kp R  &lt 2 S    &kp T        &kp G        &kp M           &kp N        &kp E      &kp I       &kp A      &none
&none  &kp Q  &kp J  &kp V      &kp D        &kp K        &kp X           &kp H        &kp COMMA  &kp PERIOD  &kp SLASH  &none
                     &mkp LCLK  &lt 3 SPACE  &lt 1 TAB    &sk LEFT_SHIFT  &key_repeat
            >;
        };

        num {
            bindings = <
&trans  &trans  &trans  &trans          &trans        &trans    &trans  &trans        &trans  &trans        &trans  &trans
&trans  &kp N9  &kp N5  &lt 2 NUMBER_1  &kp NUMBER_3  &trans    &trans  &kp NUMBER_2  &kp N0  &kp NUMBER_4  &kp N8  &trans
&trans  &trans  &trans  &trans          &kp N7        &trans    &trans  &kp NUMBER_6  &trans  &trans        &trans  &trans
                        &trans          &trans        &trans    &trans  &trans
            >;
        };

        NAV {
            bindings = <
&none   &none   &none        &none   &none             &none     &none     &none           &kp UP_ARROW  &none      &none    &none
&trans  &trans  &mt LCTRL R  &trans  &mt LEFT_SHIFT T  &none     &kp HOME  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &kp END  &none
&none   &none   &none        &none   &none             &none     &none     &kp PAGE_DOWN   &none         &kp PG_UP  &none    &none
                             &none   &none             &trans    &trans    &trans
            >;
        };

        switch {
            bindings = <
&trans  &trans  &kp LG(N7)        &kp LG(N8)        &kp LG(N9)        &trans        &repbor  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LG(NUMBER_4)  &kp LG(N5)        &kp LG(NUMBER_6)  &kp LG(N0)    &slogan  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &trans        &repand  &trans  &trans  &trans  &trans  &trans
                                  &trans            &trans            &trans        &trans   &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
